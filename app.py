import os
import argparse
from flask import Flask, send_file, abort, request
import json  # Import json for reading the index file
from gallery_renderer import (
    render_gallery,
    compute_pagination_window,
    format_date_from_timestamp,
)

app = Flask(__name__)

# --- Configuration for Image Index and Root Search Directory ---
# Path to the JSON index file generated by generate_index.py
# This file should be in the same directory as app.py or specify a full path.
INDEX_FILE_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image_index.json')

# IMPORTANT: Set this to the EXACT root directory you passed to generate_index.py
# This is crucial for security to ensure only files within this directory are served.
# Example: ROOT_SEARCH_DIR = '/Volumes/Backup/misc/20250617_iMessage'
# <--- YOU MUST CHANGE THIS!
ROOT_SEARCH_DIR = '/home/daniel/backup/20250617_iMessage/'
# Ensure ROOT_SEARCH_DIR is an absolute path and normalized for consistent checks
ROOT_SEARCH_DIR = os.path.abspath(ROOT_SEARCH_DIR) + os.sep

# Global variable to store loaded and sorted image data
# This will be populated once when the app starts
all_indexed_images = []

# Pagination settings are centralized in gallery_renderer

def load_image_index():
    """Loads and sorts the image index from the JSON file."""
    global all_indexed_images
    try:
        with open(INDEX_FILE_PATH, 'r') as f:
            raw_data = json.load(f)
        
        # Sort images by modification time (earliest first)
        # Ensure mtime is a float for consistent sorting
        all_indexed_images = sorted(raw_data, key=lambda x: float(x.get('mtime', 0)))
        print(f"Successfully loaded {len(all_indexed_images)} images from index.")
    except FileNotFoundError:
        print(f"Error: Image index file not found at '{INDEX_FILE_PATH}'. Please run generate_index.py first.")
        all_indexed_images = [] # Ensure it's an empty list if file not found
    except json.JSONDecodeError as e:
        print(f"Error: Could not decode JSON from '{INDEX_FILE_PATH}': {e}")
        all_indexed_images = []
    except Exception as e:
        print(f"An unexpected error occurred while loading index: {e}")
        all_indexed_images = []

# Load the image index when the application starts
with app.app_context():
    load_image_index()

@app.route('/')
def index():
    # Use the globally loaded and sorted image data
    total_images = len(all_indexed_images)
    page = request.args.get('page', 1, type=int)

    pagination = compute_pagination_window(page=page, total_items=total_images)

    # Build tiles for current page, using the image index for href/src
    tiles = []
    for i in range(pagination['start_index'], min(pagination['end_index'], total_images)):
        image_data = all_indexed_images[i]
        filename = os.path.basename(image_data['path'])
        caption = format_date_from_timestamp(image_data.get('mtime', 0))
        tiles.append({
            'href': f"/serve_indexed_image/{i}",
            'img_src': f"/serve_indexed_image/{i}",
            'filename': filename,
            'caption': caption,
        })

    return render_gallery(
        title="Local Image Gallery",
        page=pagination['page'],
        total_pages=pagination['total_pages'],
        start_page_num=pagination['start_page_num'],
        end_page_num=pagination['end_page_num'],
        tiles=tiles,
        empty_message="No image files found in the index or on this page.",
    )

@app.route('/serve_indexed_image/<int:image_index>')
def serve_indexed_image(image_index):
    """
    Serves an image file based on its index in the loaded image_index_data.
    Includes a security check to ensure the path is within the allowed ROOT_SEARCH_DIR.
    """
    if not (0 <= image_index < len(all_indexed_images)):
        abort(404, description="Image not found in index.")

    image_data = all_indexed_images[image_index]
    original_path = image_data['path']

    # --- SECURITY CHECK ---
    # Normalize the requested path and the root search directory for a robust check
    normalized_original_path = os.path.abspath(original_path)
    
    # Ensure the requested path is actually within the allowed ROOT_SEARCH_DIR
    # This prevents directory traversal attacks where a malicious index could point
    # to files outside the intended scope.
    if not normalized_original_path.startswith(ROOT_SEARCH_DIR):
        print(f"Security Alert: Attempted to access file outside ROOT_SEARCH_DIR: {normalized_original_path}")
        abort(403, description="Access forbidden: File is outside the allowed image directory.")

    # Check if the file actually exists on disk
    if not os.path.isfile(normalized_original_path):
        print(f"File not found on disk: {normalized_original_path}")
        abort(404, description="Image file not found on disk.")

    try:
        return send_file(normalized_original_path)
    except Exception as e:
        print(f"Error serving file '{normalized_original_path}': {e}")
        abort(500, description="Internal server error when serving image.")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run the image gallery server.')
    parser.add_argument('--port', type=int, default=8000, help='Port to run the server on (default: 8000)')
    parser.add_argument('--host', default='0.0.0.0', help='Host to bind to (default: 0.0.0.0)')
    args = parser.parse_args()
    app.run(debug=True, host=args.host, port=args.port)
